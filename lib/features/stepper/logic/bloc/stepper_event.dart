part of 'stepper_bloc.dart';

@freezed
class StepperEvent with _$StepperEvent {
  const factory StepperEvent.toggleTracking({
    required int steps,
  }) = PauseResumeTracking;
}

/**
 * Логика для блока
 * 1) В эвенте нужно передавать только шаг
 * 2) В блоке нужно достать список всех шагов из репозитория
 * 3) В последнем шаге нужно посмотреть флаг
 * 4) Создать новый объект StepModel с переданным шагом, текущей датой и противоположным флагом
 * 5) Добавить этот объект в список всех шагов
 * 6) Сохранить список всех шагов в репозиторий
 * 7) Эмитить новое состояние с обновленным списком всех шагов
 * 
 * Логика для работы с педометром на виджете
 * 1) Педометр только дает информацию о текущем шаге
 * 2) Из стейта блока нужно достать список всех шагов
 * 3) Для получения списка шагов используем функцию, работа которой описана ниже
 * 4) Это число отображаем на виджете
 * 5) Для реального изменения значения шага используем StreamBuilder. В нем в качестве стрима подставляем педометр. Из снапшота берем текущее значение шага
 * 6) Над стримбилдером вешаем блокбилдер, который возвращает стейт блока
 * 7) Если список всех шагов пустой, то вызываем эвент
 * 
 * Логика расчета количества записанных шагов за день. 
 * Пусть это будет функция, которая принимает шаг как аргумент и список StepModel, на выходе возвращает количество шагов за день
 * 1) Взять список всех шагов
 * 2) Отсортировать по дате
 * 3) Пройтись по списку и посчитать количество шагов между true и false флагами за текущий день
 * 4) Если последний флаг isPaused == true, то считаем только промежутки
 * 5) Если последний флаг isPaused == false, то считаем промежутки и шаги между последним и текущим шагом педометра, переданным в функцию
 */